[[{:x 0, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 10, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 11, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 12, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 13, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 19, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 20, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 21, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 0, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 0, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 0, :state :water, :altitude 1, :gradient 12, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 0, :state :water, :altitude 1, :gradient 14, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 0, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 0, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 0, :state :water, :altitude 1, :gradient 27, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 0, :state :water, :altitude 2, :gradient 27, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 0, :state :water, :altitude 1, :gradient 27, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 0, :state :climax, :altitude 14, :gradient 14, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 77} {:x 43, :y 0, :state :climax, :altitude 15, :gradient 30, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 93} {:x 44, :y 0, :state :climax, :altitude 31, :gradient 35, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 77} {:x 45, :y 0, :state :climax, :altitude 36, :gradient 30, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 79} {:x 46, :y 0, :state :climax, :altitude 15, :gradient 35, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 94} {:x 47, :y 0, :state :water, :altitude 1, :gradient 14, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 10, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 11, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 12, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 13, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 19, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 20, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 21, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 1, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 1, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 1, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 1, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 1, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 1, :state :climax, :altitude 12, :gradient 30, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 93} {:x 36, :y 1, :state :climax, :altitude 13, :gradient 30, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 76} {:x 37, :y 1, :state :climax, :altitude 15, :gradient 32, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 91} {:x 38, :y 1, :state :climax, :altitude 23, :gradient 35, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 39, :y 1, :state :climax, :altitude 23, :gradient 35, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 40, :y 1, :state :climax, :altitude 28, :gradient 35, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 83} {:x 41, :y 1, :state :camp, :altitude 15, :gradient 28, :generation 101, :rule "if state is in grassland or heath and more than 3 neighbours are water and generation is more than 20 then state should be camp", :fertility 15} {:x 42, :y 1, :state :water, :altitude 1, :gradient 14, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 1, :state :water, :altitude 1, :gradient 30, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 1, :state :water, :altitude 2, :gradient 35, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 1, :state :water, :altitude 2, :gradient 35, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 1, :state :water, :altitude 1, :gradient 35, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 1, :state :water, :altitude 1, :gradient 14, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 10, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 11, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 12, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 13, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 19, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 20, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 21, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 2, :state :water, :altitude 1, :gradient 13, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 2, :state :water, :altitude 1, :gradient 31, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 2, :state :water, :altitude 2, :gradient 31, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 2, :state :water, :altitude 1, :gradient 31, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 2, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 2, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 2, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 2, :state :climax, :altitude 22, :gradient 30, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 77} {:x 36, :y 2, :state :climax, :altitude 31, :gradient 31, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 75} {:x 37, :y 2, :state :climax, :altitude 29, :gradient 38, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 85} {:x 38, :y 2, :state :climax, :altitude 33, :gradient 36, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 93} {:x 39, :y 2, :state :climax, :altitude 36, :gradient 28, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 89} {:x 40, :y 2, :state :climax, :altitude 29, :gradient 40, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 41, :y 2, :state :climax, :altitude 15, :gradient 28, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 91} {:x 42, :y 2, :state :water, :altitude 1, :gradient 14, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 2, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 2, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 2, :state :climax, :altitude 15, :gradient 16, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 94} {:x 46, :y 2, :state :house, :altitude 14, :gradient 16, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 51} {:x 47, :y 2, :state :water, :altitude 1, :gradient 13, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 10, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 11, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 12, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 13, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 19, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 20, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 21, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 3, :state :water, :altitude 1, :gradient 13, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 3, :state :climax, :altitude 14, :gradient 31, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 89} {:x 29, :y 3, :state :grassland, :altitude 32, :gradient 16, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 72} {:x 30, :y 3, :state :climax, :altitude 17, :gradient 31, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 86} {:x 31, :y 3, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 3, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 3, :state :climax, :altitude 22, :gradient 30, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 84} {:x 36, :y 3, :state :climax, :altitude 31, :gradient 30, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 89} {:x 37, :y 3, :state :climax, :altitude 43, :gradient 22, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 66} {:x 38, :y 3, :state :climax, :altitude 51, :gradient 17, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 73} {:x 39, :y 3, :state :climax, :altitude 42, :gradient 24, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 40, :y 3, :state :climax, :altitude 28, :gradient 40, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 72} {:x 41, :y 3, :state :water, :altitude 2, :gradient 28, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 3, :state :water, :altitude 1, :gradient 14, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 3, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 3, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 3, :state :camp, :altitude 17, :gradient 14, :generation 101, :rule "if state is in grassland or heath and more than 3 neighbours are water and generation is more than 20 then state should be camp", :fertility 39} {:x 46, :y 3, :state :climax, :altitude 14, :gradient 16, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 71} {:x 47, :y 3, :state :water, :altitude 1, :gradient 13, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 10, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 11, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 12, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 13, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 4, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 4, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 19, :y 4, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 20, :y 4, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 21, :y 4, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 4, :state :water, :altitude 1, :gradient 13, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 4, :state :water, :altitude 2, :gradient 31, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 4, :state :climax, :altitude 17, :gradient 31, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 79} {:x 30, :y 4, :state :house, :altitude 12, :gradient 31, :generation 101, :rule "if state is in camp or abandoned and some neighbours are crop then state should be house", :fertility 77} {:x 31, :y 4, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 4, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 4, :state :house, :altitude 13, :gradient 30, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 55} {:x 36, :y 4, :state :pasture, :altitude 29, :gradient 42, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 24} {:x 37, :y 4, :state :pasture, :altitude 42, :gradient 22, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 38} {:x 38, :y 4, :state :climax, :altitude 46, :gradient 19, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 79} {:x 39, :y 4, :state :climax, :altitude 38, :gradient 37, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 40, :y 4, :state :climax, :altitude 27, :gradient 41, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 64} {:x 41, :y 4, :state :water, :altitude 2, :gradient 27, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 4, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 4, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 4, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 4, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 4, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 4, :state :water, :altitude 1, :gradient 13, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 10, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 11, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 12, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 13, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 5, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 5, :state :water, :altitude 2, :gradient 27, :generation 101, :rule "if state is water then state should be water"} {:x 19, :y 5, :state :house, :altitude 12, :gradient 27, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 21} {:x 20, :y 5, :state :house, :altitude 12, :gradient 27, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 21, :y 5, :state :water, :altitude 1, :gradient 23, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 5, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 5, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 5, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 5, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 5, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 5, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 5, :state :water, :altitude 1, :gradient 14, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 5, :state :water, :altitude 1, :gradient 34, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 5, :state :grassland, :altitude 31, :gradient 41, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 33} {:x 37, :y 5, :state :pasture, :altitude 32, :gradient 17, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 45} {:x 38, :y 5, :state :grassland, :altitude 37, :gradient 19, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 32} {:x 39, :y 5, :state :grassland, :altitude 33, :gradient 34, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 44} {:x 40, :y 5, :state :grassland, :altitude 14, :gradient 37, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 41} {:x 41, :y 5, :state :water, :altitude 1, :gradient 26, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 5, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 5, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 10, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 11, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 12, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 13, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 6, :state :water, :altitude 1, :gradient 17, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 6, :state :climax, :altitude 17, :gradient 27, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 82} {:x 19, :y 6, :state :pasture, :altitude 28, :gradient 25, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 27} {:x 20, :y 6, :state :climax, :altitude 24, :gradient 27, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 93} {:x 21, :y 6, :state :water, :altitude 2, :gradient 23, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 6, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 6, :state :water, :altitude 1, :gradient 18, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 6, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 6, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 6, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 6, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 6, :state :water, :altitude 1, :gradient 14, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 6, :state :house, :altitude 15, :gradient 34, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 36} {:x 36, :y 6, :state :crop, :altitude 35, :gradient 42, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 61} {:x 37, :y 6, :state :crop, :altitude 32, :gradient 14, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 56} {:x 38, :y 6, :state :crop, :altitude 29, :gradient 16, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 21} {:x 39, :y 6, :state :camp, :altitude 27, :gradient 25, :generation 101, :rule "if state is camp and some neighbours are ploughland then state should be camp", :fertility 34} {:x 40, :y 6, :state :pasture, :altitude 12, :gradient 32, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 10} {:x 41, :y 6, :state :water, :altitude 1, :gradient 13, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 6, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 10, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 11, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 12, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 13, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 7, :state :water, :altitude 1, :gradient 13, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 7, :state :water, :altitude 1, :gradient 30, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 7, :state :climax, :altitude 18, :gradient 30, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 67} {:x 19, :y 7, :state :climax, :altitude 27, :gradient 29, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 83} {:x 20, :y 7, :state :climax, :altitude 14, :gradient 27, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 79} {:x 21, :y 7, :state :water, :altitude 1, :gradient 23, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 7, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 7, :state :water, :altitude 1, :gradient 23, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 7, :state :climax, :altitude 19, :gradient 34, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 92} {:x 26, :y 7, :state :forest, :altitude 22, :gradient 34, :generation 101, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 29} {:x 27, :y 7, :state :house, :altitude 12, :gradient 34, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 11} {:x 28, :y 7, :state :water, :altitude 1, :gradient 34, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 7, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 7, :state :water, :altitude 1, :gradient 14, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 7, :state :camp, :altitude 15, :gradient 34, :generation 101, :rule "if state is camp and some neighbours are ploughland then state should be camp", :fertility 37} {:x 36, :y 7, :state :grassland, :altitude 35, :gradient 41, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 39} {:x 37, :y 7, :state :crop, :altitude 43, :gradient 9, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 61} {:x 38, :y 7, :state :house, :altitude 37, :gradient 20, :generation 101, :rule "if state is house and some neighbours are ploughland then state should be house", :fertility 34} {:x 39, :y 7, :state :grassland, :altitude 27, :gradient 35, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 46} {:x 40, :y 7, :state :house, :altitude 12, :gradient 26, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 30} {:x 41, :y 7, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 7, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 10, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 11, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 12, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 13, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 8, :state :water, :altitude 1, :gradient 13, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 8, :state :climax, :altitude 14, :gradient 30, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 89} {:x 18, :y 8, :state :crop, :altitude 31, :gradient 28, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 15} {:x 19, :y 8, :state :climax, :altitude 28, :gradient 29, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 80} {:x 20, :y 8, :state :water, :altitude 2, :gradient 27, :generation 101, :rule "if state is water then state should be water"} {:x 21, :y 8, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 8, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 8, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 8, :state :water, :altitude 1, :gradient 30, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 8, :state :climax, :altitude 24, :gradient 40, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 82} {:x 26, :y 8, :state :scrub, :altitude 35, :gradient 29, :generation 101, :rule "if state is in climax and more than 3 neighbours within 2 are house then state should be scrub", :fertility 6} {:x 27, :y 8, :state :pasture, :altitude 35, :gradient 40, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 10} {:x 28, :y 8, :state :house, :altitude 22, :gradient 34, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 11} {:x 29, :y 8, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 8, :state :water, :altitude 1, :gradient 14, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 8, :state :water, :altitude 2, :gradient 34, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 8, :state :house, :altitude 28, :gradient 42, :generation 101, :rule "if state is house and some neighbours are ploughland then state should be house", :fertility 65} {:x 37, :y 8, :state :crop, :altitude 37, :gradient 28, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 42} {:x 38, :y 8, :state :house, :altitude 36, :gradient 31, :generation 101, :rule "if state is house and some neighbours are ploughland then state should be house", :fertility 27} {:x 39, :y 8, :state :pasture, :altitude 23, :gradient 36, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 33} {:x 40, :y 8, :state :water, :altitude 2, :gradient 26, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 8, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 8, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 10, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 11, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 12, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 13, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 9, :state :water, :altitude 1, :gradient 13, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 9, :state :house, :altitude 12, :gradient 30, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 18, :y 9, :state :climax, :altitude 29, :gradient 30, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 69} {:x 19, :y 9, :state :climax, :altitude 28, :gradient 29, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 77} {:x 20, :y 9, :state :pasture, :altitude 18, :gradient 27, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 47} {:x 21, :y 9, :state :pasture, :altitude 17, :gradient 27, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 23} {:x 22, :y 9, :state :house, :altitude 23, :gradient 27, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 20} {:x 23, :y 9, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 9, :state :house, :altitude 14, :gradient 35, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 25, :y 9, :state :pasture, :altitude 31, :gradient 40, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 10} {:x 26, :y 9, :state :scrub, :altitude 41, :gradient 13, :generation 101, :rule "if state is in climax and more than 3 neighbours within 2 are house then state should be scrub", :fertility 20} {:x 27, :y 9, :state :forest, :altitude 35, :gradient 39, :generation 101, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 25} {:x 28, :y 9, :state :house, :altitude 20, :gradient 34, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 8} {:x 29, :y 9, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 9, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 9, :state :water, :altitude 1, :gradient 27, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 9, :state :crop, :altitude 15, :gradient 36, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 25} {:x 37, :y 9, :state :forest, :altitude 26, :gradient 25, :generation 101, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 68} {:x 38, :y 9, :state :crop, :altitude 23, :gradient 36, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 37} {:x 39, :y 9, :state :house, :altitude 12, :gradient 35, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 38} {:x 40, :y 9, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 9, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 9, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 10, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 11, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 12, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 13, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 10, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 10, :state :water, :altitude 1, :gradient 28, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 10, :state :house, :altitude 23, :gradient 35, :generation 101, :rule "if state is house and some neighbours are crop then state should be house", :fertility 24} {:x 19, :y 10, :state :grassland, :altitude 28, :gradient 18, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 35} {:x 20, :y 10, :state :climax, :altitude 28, :gradient 19, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 82} {:x 21, :y 10, :state :climax, :altitude 28, :gradient 15, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 64} {:x 22, :y 10, :state :ploughland, :altitude 23, :gradient 27, :generation 101, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 22} {:x 23, :y 10, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 10, :state :pasture, :altitude 23, :gradient 35, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 40} {:x 25, :y 10, :state :pasture, :altitude 36, :gradient 27, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 10} {:x 26, :y 10, :state :pasture, :altitude 37, :gradient 28, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 10} {:x 27, :y 10, :state :climax, :altitude 26, :gradient 40, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 77} {:x 28, :y 10, :state :water, :altitude 2, :gradient 34, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 10, :state :water, :altitude 1, :gradient 19, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 10, :state :water, :altitude 1, :gradient 17, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 10, :state :pasture, :altitude 18, :gradient 26, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 29} {:x 37, :y 10, :state :pasture, :altitude 27, :gradient 25, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 37} {:x 38, :y 10, :state :scrub, :altitude 12, :gradient 26, :generation 101, :rule "if state is in climax and more than 3 neighbours within 2 are house then state should be scrub", :fertility 79} {:x 39, :y 10, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 10, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 10, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 10, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 11, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 12, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 13, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 11, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 11, :state :grassland, :altitude 20, :gradient 35, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 12} {:x 19, :y 11, :state :grassland, :altitude 36, :gradient 22, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 51} {:x 20, :y 11, :state :forest, :altitude 32, :gradient 10, :generation 101, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 48} {:x 21, :y 11, :state :scrub, :altitude 27, :gradient 22, :generation 101, :rule "if state is in climax and more than 3 neighbours within 2 are house then state should be scrub", :fertility 86} {:x 22, :y 11, :state :forest, :altitude 19, :gradient 30, :generation 101, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 58} {:x 23, :y 11, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 11, :state :house, :altitude 14, :gradient 35, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 65} {:x 25, :y 11, :state :forest, :altitude 22, :gradient 36, :generation 101, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 39} {:x 26, :y 11, :state :pasture, :altitude 20, :gradient 36, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 10} {:x 27, :y 11, :state :house, :altitude 13, :gradient 36, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 25} {:x 28, :y 11, :state :water, :altitude 1, :gradient 25, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 11, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 11, :state :water, :altitude 1, :gradient 17, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 11, :state :house, :altitude 15, :gradient 26, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 28} {:x 37, :y 11, :state :house, :altitude 18, :gradient 26, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 10} {:x 38, :y 11, :state :water, :altitude 1, :gradient 26, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 11, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 11, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 10, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 11, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 12, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 13, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 12, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 12, :state :crop, :altitude 15, :gradient 35, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 55} {:x 19, :y 12, :state :house, :altitude 32, :gradient 22, :generation 101, :rule "if state is house and some neighbours are ploughland then state should be house", :fertility 50} {:x 20, :y 12, :state :grassland, :altitude 37, :gradient 12, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 54} {:x 21, :y 12, :state :house, :altitude 31, :gradient 22, :generation 101, :rule "if state is in camp or abandoned and some neighbours are crop then state should be house", :fertility 30} {:x 22, :y 12, :state :grassland, :altitude 15, :gradient 30, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 24} {:x 23, :y 12, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 12, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 12, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 12, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 12, :state :water, :altitude 1, :gradient 19, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 12, :state :water, :altitude 1, :gradient 12, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 12, :state :water, :altitude 1, :gradient 14, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 12, :state :water, :altitude 1, :gradient 17, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 12, :state :water, :altitude 1, :gradient 17, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 12, :state :water, :altitude 1, :gradient 17, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 12, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 10, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 11, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 12, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 13, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 13, :state :water, :altitude 1, :gradient 14, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 13, :state :water, :altitude 1, :gradient 26, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 13, :state :climax, :altitude 22, :gradient 31, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 19, :y 13, :state :climax, :altitude 27, :gradient 22, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 20, :y 13, :state :grassland, :altitude 27, :gradient 24, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 39} {:x 21, :y 13, :state :house, :altitude 24, :gradient 24, :generation 101, :rule "if state is house and some neighbours are pasture then state should be house", :fertility 13} {:x 22, :y 13, :state :house, :altitude 23, :gradient 30, :generation 101, :rule "if state is house and some neighbours are pasture then state should be house", :fertility 30} {:x 23, :y 13, :state :house, :altitude 22, :gradient 28, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 24, :y 13, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 13, :state :water, :altitude 1, :gradient 13, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 13, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 13, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 13, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 13, :state :water, :altitude 1, :gradient 12, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 13, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 10, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 11, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 12, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 13, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 14, :state :water, :altitude 1, :gradient 12, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 14, :state :water, :altitude 1, :gradient 18, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 14, :state :water, :altitude 1, :gradient 30, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 14, :state :forest, :altitude 15, :gradient 30, :generation 101, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 47} {:x 18, :y 14, :state :climax, :altitude 27, :gradient 30, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 19, :y 14, :state :climax, :altitude 26, :gradient 15, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 20, :y 14, :state :crop, :altitude 17, :gradient 18, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 45} {:x 21, :y 14, :state :crop, :altitude 13, :gradient 20, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 19} {:x 22, :y 14, :state :ploughland, :altitude 29, :gradient 23, :generation 101, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 23} {:x 23, :y 14, :state :house, :altitude 18, :gradient 28, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 49} {:x 24, :y 14, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 14, :state :water, :altitude 1, :gradient 13, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 14, :state :water, :altitude 1, :gradient 18, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 14, :state :water, :altitude 1, :gradient 30, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 14, :state :house, :altitude 14, :gradient 39, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 44} {:x 33, :y 14, :state :climax, :altitude 22, :gradient 39, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 76} {:x 34, :y 14, :state :climax, :altitude 13, :gradient 39, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 91} {:x 35, :y 14, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 14, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 15, :state :water, :altitude 1, :gradient 17, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 15, :state :water, :altitude 1, :gradient 18, :generation 101, :rule "if state is water then state should be water"} {:x 10, :y 15, :state :water, :altitude 1, :gradient 19, :generation 101, :rule "if state is water then state should be water"} {:x 11, :y 15, :state :water, :altitude 1, :gradient 19, :generation 101, :rule "if state is water then state should be water"} {:x 12, :y 15, :state :water, :altitude 1, :gradient 19, :generation 101, :rule "if state is water then state should be water"} {:x 13, :y 15, :state :water, :altitude 1, :gradient 18, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 15, :state :water, :altitude 1, :gradient 34, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 15, :state :fire, :altitude 13, :gradient 40, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 37} {:x 16, :y 15, :state :climax, :altitude 19, :gradient 44, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 17, :y 15, :state :climax, :altitude 31, :gradient 46, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 18, :y 15, :state :climax, :altitude 29, :gradient 32, :generation 101, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 43} {:x 19, :y 15, :state :scrub, :altitude 26, :gradient 33, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 57} {:x 20, :y 15, :state :pasture, :altitude 14, :gradient 36, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 27} {:x 21, :y 15, :state :water, :altitude 9, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 15, :state :grassland, :altitude 13, :gradient 28, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 27} {:x 23, :y 15, :state :water, :altitude 1, :gradient 28, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 15, :state :water, :altitude 1, :gradient 17, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 15, :state :water, :altitude 1, :gradient 17, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 15, :state :water, :altitude 1, :gradient 31, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 15, :state :waste, :altitude 14, :gradient 31, :generation 101, :rule "if state is camp then 1 chance in 5 state should be waste", :fertility 72} {:x 31, :y 15, :state :grassland, :altitude 19, :gradient 32, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 54} {:x 32, :y 15, :state :climax, :altitude 31, :gradient 39, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 33, :y 15, :state :ploughland, :altitude 40, :gradient 20, :generation 101, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 42} {:x 34, :y 15, :state :climax, :altitude 23, :gradient 39, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 76} {:x 35, :y 15, :state :water, :altitude 1, :gradient 27, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 15, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 16, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 16, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 16, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 16, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 16, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 16, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 16, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 16, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 16, :state :water, :altitude 1, :gradient 25, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 16, :state :house, :altitude 18, :gradient 30, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 40} {:x 10, :y 16, :state :crop, :altitude 19, :gradient 35, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 33} {:x 11, :y 16, :state :climax, :altitude 20, :gradient 35, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 12, :y 16, :state :climax, :altitude 18, :gradient 35, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 69} {:x 13, :y 16, :state :scrub, :altitude 17, :gradient 34, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 74} {:x 14, :y 16, :state :waste, :altitude 19, :gradient 51, :generation 101, :rule "if state is fire then state should be waste", :fertility 75} {:x 15, :y 16, :state :scrub, :altitude 35, :gradient 55, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 62} {:x 16, :y 16, :state :climax, :altitude 41, :gradient 43, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 17, :y 16, :state :climax, :altitude 45, :gradient 42, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 18, :y 16, :state :climax, :altitude 47, :gradient 35, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 19, :y 16, :state :forest, :altitude 45, :gradient 47, :generation 101, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 65} {:x 20, :y 16, :state :climax, :altitude 35, :gradient 45, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 28} {:x 21, :y 16, :state :pasture, :altitude 19, :gradient 33, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 52} {:x 22, :y 16, :state :climax, :altitude 15, :gradient 30, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 23, :y 16, :state :water, :altitude 1, :gradient 26, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 16, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 16, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 16, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 16, :state :water, :altitude 1, :gradient 12, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 16, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 16, :state :ploughland, :altitude 18, :gradient 31, :generation 101, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 85} {:x 30, :y 16, :state :ploughland, :altitude 32, :gradient 31, :generation 101, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 52} {:x 31, :y 16, :state :climax, :altitude 32, :gradient 19, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 32, :y 16, :state :climax, :altitude 33, :gradient 21, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 33, :y 16, :state :climax, :altitude 32, :gradient 25, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 67} {:x 34, :y 16, :state :climax, :altitude 28, :gradient 39, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 35, :y 16, :state :water, :altitude 1, :gradient 27, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 16, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 16, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 16, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 16, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 16, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 16, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 16, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 16, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 16, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 16, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 16, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 16, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 17, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 17, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 17, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 17, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 17, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 17, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 17, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 17, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 17, :state :water, :altitude 1, :gradient 25, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 17, :state :crop, :altitude 26, :gradient 30, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 40} {:x 10, :y 17, :state :pasture, :altitude 31, :gradient 23, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 25} {:x 11, :y 17, :state :climax, :altitude 36, :gradient 17, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 12, :y 17, :state :heath, :altitude 35, :gradient 19, :generation 101, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 69} {:x 13, :y 17, :state :heath, :altitude 29, :gradient 18, :generation 101, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 54} {:x 14, :y 17, :state :scrub, :altitude 32, :gradient 35, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 63} {:x 15, :y 17, :state :scrub, :altitude 52, :gradient 37, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 51} {:x 16, :y 17, :state :climax, :altitude 56, :gradient 20, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 27} {:x 17, :y 17, :state :climax, :altitude 55, :gradient 20, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 18, :y 17, :state :climax, :altitude 61, :gradient 12, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 19, :y 17, :state :climax, :altitude 54, :gradient 26, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 20, :y 17, :state :scrub, :altitude 42, :gradient 35, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 58} {:x 21, :y 17, :state :scrub, :altitude 31, :gradient 27, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 29} {:x 22, :y 17, :state :climax, :altitude 27, :gradient 30, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 23, :y 17, :state :climax, :altitude 22, :gradient 26, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 61} {:x 24, :y 17, :state :climax, :altitude 17, :gradient 26, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 73} {:x 25, :y 17, :state :climax, :altitude 12, :gradient 26, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 26, :y 17, :state :climax, :altitude 12, :gradient 22, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 27, :y 17, :state :waste, :altitude 12, :gradient 26, :generation 101, :rule "if state is fire then state should be waste", :fertility 57} {:x 28, :y 17, :state :heath, :altitude 13, :gradient 26, :generation 101, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 65} {:x 29, :y 17, :state :pasture, :altitude 23, :gradient 31, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 55} {:x 30, :y 17, :state :grassland, :altitude 31, :gradient 17, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 69} {:x 31, :y 17, :state :crop, :altitude 32, :gradient 16, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 48} {:x 32, :y 17, :state :crop, :altitude 29, :gradient 15, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 49} {:x 33, :y 17, :state :climax, :altitude 26, :gradient 32, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 73} {:x 34, :y 17, :state :camp, :altitude 15, :gradient 31, :generation 101, :rule "if state is in grassland or heath and more than 3 neighbours are water and generation is more than 20 then state should be camp", :fertility 46} {:x 35, :y 17, :state :water, :altitude 1, :gradient 27, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 17, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 17, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 17, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 17, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 17, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 17, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 17, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 17, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 17, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 17, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 17, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 17, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 18, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 18, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 18, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 18, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 18, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 18, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 18, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 18, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 18, :state :water, :altitude 1, :gradient 25, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 18, :state :house, :altitude 13, :gradient 30, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 31} {:x 10, :y 18, :state :crop, :altitude 19, :gradient 35, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 29} {:x 11, :y 18, :state :waste, :altitude 27, :gradient 35, :generation 101, :rule "if state is fire then state should be waste", :fertility 64} {:x 12, :y 18, :state :heath, :altitude 31, :gradient 14, :generation 101, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 67} {:x 13, :y 18, :state :scrub, :altitude 31, :gradient 8, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 37} {:x 14, :y 18, :state :scrub, :altitude 31, :gradient 24, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 55} {:x 15, :y 18, :state :climax, :altitude 41, :gradient 28, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 16, :y 18, :state :scrub, :altitude 49, :gradient 27, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 54} {:x 17, :y 18, :state :climax, :altitude 43, :gradient 24, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 18, :y 18, :state :climax, :altitude 47, :gradient 24, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 19, :y 18, :state :fire, :altitude 47, :gradient 25, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 45} {:x 20, :y 18, :state :forest, :altitude 40, :gradient 26, :generation 101, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 63} {:x 21, :y 18, :state :climax, :altitude 28, :gradient 16, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 32} {:x 22, :y 18, :state :climax, :altitude 27, :gradient 9, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 23, :y 18, :state :climax, :altitude 27, :gradient 10, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 24, :y 18, :state :climax, :altitude 27, :gradient 15, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 75} {:x 25, :y 18, :state :climax, :altitude 22, :gradient 15, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 24} {:x 26, :y 18, :state :climax, :altitude 23, :gradient 15, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 27, :y 18, :state :climax, :altitude 23, :gradient 17, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 28, :y 18, :state :fire, :altitude 27, :gradient 17, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 43} {:x 29, :y 18, :state :pasture, :altitude 15, :gradient 19, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 43} {:x 30, :y 18, :state :waste, :altitude 17, :gradient 20, :generation 101, :rule "if state is fire then state should be waste", :fertility 61} {:x 31, :y 18, :state :house, :altitude 18, :gradient 20, :generation 101, :rule "if state is house and some neighbours are ploughland then state should be house", :fertility 52} {:x 32, :y 18, :state :house, :altitude 27, :gradient 19, :generation 101, :rule "if state is house and some neighbours are ploughland then state should be house", :fertility 43} {:x 33, :y 18, :state :climax, :altitude 31, :gradient 28, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 74} {:x 34, :y 18, :state :water, :altitude 1, :gradient 30, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 18, :state :water, :altitude 1, :gradient 14, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 18, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 18, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 18, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 18, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 18, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 18, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 18, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 18, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 18, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 18, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 18, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 18, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 19, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 19, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 19, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 19, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 19, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 19, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 19, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 19, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 19, :state :water, :altitude 1, :gradient 12, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 19, :state :water, :altitude 1, :gradient 18, :generation 101, :rule "if state is water then state should be water"} {:x 10, :y 19, :state :water, :altitude 1, :gradient 26, :generation 101, :rule "if state is water then state should be water"} {:x 11, :y 19, :state :waste, :altitude 22, :gradient 31, :generation 101, :rule "if state is fire then state should be waste", :fertility 28} {:x 12, :y 19, :state :waste, :altitude 27, :gradient 14, :generation 101, :rule "if state is fire then state should be waste", :fertility 85} {:x 13, :y 19, :state :fire, :altitude 31, :gradient 9, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 70} {:x 14, :y 19, :state :scrub, :altitude 28, :gradient 12, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 54} {:x 15, :y 19, :state :forest, :altitude 29, :gradient 24, :generation 101, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 47} {:x 16, :y 19, :state :scrub, :altitude 37, :gradient 27, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 26} {:x 17, :y 19, :state :scrub, :altitude 41, :gradient 19, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 30} {:x 18, :y 19, :state :climax, :altitude 37, :gradient 20, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 19, :y 19, :state :heath, :altitude 38, :gradient 11, :generation 101, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 40} {:x 20, :y 19, :state :waste, :altitude 36, :gradient 19, :generation 101, :rule "if state is fire then state should be waste", :fertility 51} {:x 21, :y 19, :state :fire, :altitude 28, :gradient 20, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 46} {:x 22, :y 19, :state :climax, :altitude 26, :gradient 15, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 23, :y 19, :state :climax, :altitude 26, :gradient 3, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 24, :y 19, :state :climax, :altitude 27, :gradient 6, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 25, :y 19, :state :climax, :altitude 27, :gradient 11, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 32} {:x 26, :y 19, :state :forest, :altitude 22, :gradient 11, :generation 101, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 41} {:x 27, :y 19, :state :fire, :altitude 24, :gradient 19, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 40} {:x 28, :y 19, :state :climax, :altitude 29, :gradient 21, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 29, :y 19, :state :heath, :altitude 22, :gradient 24, :generation 101, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 61} {:x 30, :y 19, :state :waste, :altitude 12, :gradient 22, :generation 101, :rule "if state is fire then state should be waste", :fertility 45} {:x 31, :y 19, :state :crop, :altitude 13, :gradient 21, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 52} {:x 32, :y 19, :state :grassland, :altitude 15, :gradient 32, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 38} {:x 33, :y 19, :state :house, :altitude 17, :gradient 30, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 47} {:x 34, :y 19, :state :water, :altitude 1, :gradient 30, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 19, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 19, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 19, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 19, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 19, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 19, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 19, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 19, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 19, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 19, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 19, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 19, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 19, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 20, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 20, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 20, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 20, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 20, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 20, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 20, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 20, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 20, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 20, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 10, :y 20, :state :water, :altitude 1, :gradient 23, :generation 101, :rule "if state is water then state should be water"} {:x 11, :y 20, :state :climax, :altitude 23, :gradient 44, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 12, :y 20, :state :heath, :altitude 32, :gradient 37, :generation 101, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 63} {:x 13, :y 20, :state :fire, :altitude 36, :gradient 32, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 44} {:x 14, :y 20, :state :heath, :altitude 35, :gradient 31, :generation 101, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 47} {:x 15, :y 20, :state :scrub, :altitude 37, :gradient 36, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 65} {:x 16, :y 20, :state :scrub, :altitude 52, :gradient 36, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 75} {:x 17, :y 20, :state :scrub, :altitude 56, :gradient 28, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 60} {:x 18, :y 20, :state :scrub, :altitude 43, :gradient 29, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 40} {:x 19, :y 20, :state :scrub, :altitude 36, :gradient 14, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 32} {:x 20, :y 20, :state :climax, :altitude 46, :gradient 13, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 21, :y 20, :state :climax, :altitude 41, :gradient 20, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 22, :y 20, :state :climax, :altitude 29, :gradient 15, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 64} {:x 23, :y 20, :state :scrub, :altitude 26, :gradient 3, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 45} {:x 24, :y 20, :state :climax, :altitude 28, :gradient 3, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 25, :y 20, :state :climax, :altitude 28, :gradient 18, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 26, :y 20, :state :climax, :altitude 17, :gradient 15, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 27, :y 20, :state :climax, :altitude 20, :gradient 19, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 28, :y 20, :state :waste, :altitude 36, :gradient 15, :generation 101, :rule "if state is fire then state should be waste", :fertility 38} {:x 29, :y 20, :state :waste, :altitude 35, :gradient 24, :generation 101, :rule "if state is fire then state should be waste", :fertility 49} {:x 30, :y 20, :state :fire, :altitude 28, :gradient 23, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 86} {:x 31, :y 20, :state :climax, :altitude 33, :gradient 26, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 85} {:x 32, :y 20, :state :climax, :altitude 15, :gradient 32, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 86} {:x 33, :y 20, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 20, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 20, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 20, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 20, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 20, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 20, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 20, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 20, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 20, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 20, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 20, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 20, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 20, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 20, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 21, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 21, :state :climax, :altitude 12, :gradient 26, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 79} {:x 10, :y 21, :state :forest, :altitude 12, :gradient 26, :generation 101, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 60} {:x 11, :y 21, :state :scrub, :altitude 24, :gradient 44, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 54} {:x 12, :y 21, :state :fire, :altitude 45, :gradient 36, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 40} {:x 13, :y 21, :state :forest, :altitude 59, :gradient 27, :generation 101, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 64} {:x 14, :y 21, :state :climax, :altitude 50, :gradient 24, :generation 101, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 55} {:x 15, :y 21, :state :scrub, :altitude 49, :gradient 38, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 76} {:x 16, :y 21, :state :climax, :altitude 64, :gradient 40, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 17, :y 21, :state :scrub, :altitude 65, :gradient 34, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 58} {:x 18, :y 21, :state :climax, :altitude 50, :gradient 41, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 19, :y 21, :state :heath, :altitude 38, :gradient 19, :generation 101, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 49} {:x 20, :y 21, :state :fire, :altitude 38, :gradient 10, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 64} {:x 21, :y 21, :state :scrub, :altitude 38, :gradient 17, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 52} {:x 22, :y 21, :state :climax, :altitude 29, :gradient 15, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 23, :y 21, :state :climax, :altitude 27, :gradient 5, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 24, :y 21, :state :climax, :altitude 28, :gradient 7, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 25, :y 21, :state :climax, :altitude 29, :gradient 19, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 30} {:x 26, :y 21, :state :climax, :altitude 35, :gradient 19, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 27, :y 21, :state :climax, :altitude 28, :gradient 22, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 28, :y 21, :state :climax, :altitude 28, :gradient 35, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 70} {:x 29, :y 21, :state :fire, :altitude 27, :gradient 35, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 70} {:x 30, :y 21, :state :climax, :altitude 23, :gradient 34, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 31, :y 21, :state :camp, :altitude 22, :gradient 32, :generation 101, :rule "if state is in grassland or heath and more than 3 neighbours are water and generation is more than 20 then state should be camp", :fertility 47} {:x 32, :y 21, :state :water, :altitude 2, :gradient 32, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 21, :state :water, :altitude 1, :gradient 14, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 21, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 22, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 22, :state :pasture, :altitude 23, :gradient 26, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 48} {:x 10, :y 22, :state :scrub, :altitude 27, :gradient 15, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 71} {:x 11, :y 22, :state :waste, :altitude 27, :gradient 33, :generation 101, :rule "if state is fire then state should be waste", :fertility 40} {:x 12, :y 22, :state :heath, :altitude 40, :gradient 35, :generation 101, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 70} {:x 13, :y 22, :state :scrub, :altitude 59, :gradient 32, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 37} {:x 14, :y 22, :state :climax, :altitude 54, :gradient 27, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 33} {:x 15, :y 22, :state :scrub, :altitude 54, :gradient 35, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 70} {:x 16, :y 22, :state :fire, :altitude 73, :gradient 34, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 75} {:x 17, :y 22, :state :forest, :altitude 77, :gradient 23, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 18, :y 22, :state :climax, :altitude 55, :gradient 39, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 19, :y 22, :state :climax, :altitude 42, :gradient 17, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 20, :y 22, :state :waste, :altitude 40, :gradient 15, :generation 101, :rule "if state is fire then state should be waste", :fertility 51} {:x 21, :y 22, :state :fire, :altitude 36, :gradient 22, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 31} {:x 22, :y 22, :state :fire, :altitude 31, :gradient 14, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 76} {:x 23, :y 22, :state :fire, :altitude 29, :gradient 9, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 49} {:x 24, :y 22, :state :climax, :altitude 28, :gradient 7, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 25, :y 22, :state :climax, :altitude 33, :gradient 10, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 26, :y 22, :state :pasture, :altitude 36, :gradient 8, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 11} {:x 27, :y 22, :state :pasture, :altitude 28, :gradient 22, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 23} {:x 28, :y 22, :state :climax, :altitude 14, :gradient 27, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 78} {:x 29, :y 22, :state :water, :altitude 1, :gradient 27, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 22, :state :water, :altitude 1, :gradient 26, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 22, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 22, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 22, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 22, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 23, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 23, :state :water, :altitude 1, :gradient 13, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 23, :state :water, :altitude 1, :gradient 13, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 23, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 23, :state :pasture, :altitude 15, :gradient 26, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 34} {:x 10, :y 23, :state :waste, :altitude 27, :gradient 25, :generation 101, :rule "if state is fire then state should be waste", :fertility 52} {:x 11, :y 23, :state :heath, :altitude 27, :gradient 18, :generation 101, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 74} {:x 12, :y 23, :state :waste, :altitude 27, :gradient 32, :generation 101, :rule "if state is fire then state should be waste", :fertility 47} {:x 13, :y 23, :state :waste, :altitude 32, :gradient 32, :generation 101, :rule "if state is fire then state should be waste", :fertility 56} {:x 14, :y 23, :state :scrub, :altitude 38, :gradient 27, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 58} {:x 15, :y 23, :state :waste, :altitude 43, :gradient 35, :generation 101, :rule "if state is fire then state should be waste", :fertility 67} {:x 16, :y 23, :state :climax, :altitude 57, :gradient 36, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 17, :y 23, :state :climax, :altitude 69, :gradient 25, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 18, :y 23, :state :scrub, :altitude 54, :gradient 37, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 60} {:x 19, :y 23, :state :climax, :altitude 50, :gradient 29, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 20, :y 23, :state :waste, :altitude 51, :gradient 15, :generation 101, :rule "if state is fire then state should be waste", :fertility 52} {:x 21, :y 23, :state :heath, :altitude 41, :gradient 22, :generation 101, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 64} {:x 22, :y 23, :state :waste, :altitude 35, :gradient 13, :generation 101, :rule "if state is fire then state should be waste", :fertility 68} {:x 23, :y 23, :state :fire, :altitude 31, :gradient 16, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 38} {:x 24, :y 23, :state :climax, :altitude 26, :gradient 19, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 25, :y 23, :state :climax, :altitude 29, :gradient 22, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 26, :y 23, :state :pasture, :altitude 29, :gradient 22, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 29} {:x 27, :y 23, :state :climax, :altitude 27, :gradient 22, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 82} {:x 28, :y 23, :state :climax, :altitude 26, :gradient 27, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 64} {:x 29, :y 23, :state :camp, :altitude 12, :gradient 25, :generation 101, :rule "if state is in grassland or heath and more than 3 neighbours are water and generation is more than 20 then state should be camp", :fertility 24} {:x 30, :y 23, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 23, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 24, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 24, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 24, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 24, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 24, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 24, :state :water, :altitude 1, :gradient 23, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 24, :state :water, :altitude 2, :gradient 28, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 24, :state :house, :altitude 14, :gradient 28, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 32} {:x 8, :y 24, :state :climax, :altitude 14, :gradient 28, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 9, :y 24, :state :grassland, :altitude 12, :gradient 28, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 29} {:x 10, :y 24, :state :climax, :altitude 22, :gradient 29, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 72} {:x 11, :y 24, :state :climax, :altitude 37, :gradient 37, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 81} {:x 12, :y 24, :state :fire, :altitude 37, :gradient 34, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 31} {:x 13, :y 24, :state :fire, :altitude 36, :gradient 34, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 51} {:x 14, :y 24, :state :scrub, :altitude 41, :gradient 45, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 40} {:x 15, :y 24, :state :heath, :altitude 54, :gradient 56, :generation 101, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 46} {:x 16, :y 24, :state :climax, :altitude 64, :gradient 51, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 73} {:x 17, :y 24, :state :forest, :altitude 79, :gradient 40, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 18, :y 24, :state :climax, :altitude 69, :gradient 43, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 73} {:x 19, :y 24, :state :forest, :altitude 51, :gradient 37, :generation 101, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 58} {:x 20, :y 24, :state :fire, :altitude 43, :gradient 20, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 43} {:x 21, :y 24, :state :forest, :altitude 37, :gradient 24, :generation 101, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 30} {:x 22, :y 24, :state :waste, :altitude 29, :gradient 24, :generation 101, :rule "if state is fire then state should be waste", :fertility 67} {:x 23, :y 24, :state :climax, :altitude 28, :gradient 33, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 80} {:x 24, :y 24, :state :climax, :altitude 19, :gradient 30, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 64} {:x 25, :y 24, :state :climax, :altitude 14, :gradient 28, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 64} {:x 26, :y 24, :state :climax, :altitude 22, :gradient 28, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 72} {:x 27, :y 24, :state :climax, :altitude 20, :gradient 28, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 28, :y 24, :state :house, :altitude 20, :gradient 26, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 43} {:x 29, :y 24, :state :water, :altitude 2, :gradient 25, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 24, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 24, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 24, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 24, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 24, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 24, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 24, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 24, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 24, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 24, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 24, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 24, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 24, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 24, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 24, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 24, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 24, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 24, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 25, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 25, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 25, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 25, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 25, :state :water, :altitude 1, :gradient 19, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 25, :state :house, :altitude 12, :gradient 44, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 16} {:x 6, :y 25, :state :climax, :altitude 24, :gradient 51, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 81} {:x 7, :y 25, :state :crop, :altitude 29, :gradient 50, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 27} {:x 8, :y 25, :state :house, :altitude 29, :gradient 40, :generation 101, :rule "if state is house and some neighbours are ploughland then state should be house", :fertility 20} {:x 9, :y 25, :state :grassland, :altitude 26, :gradient 34, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 48} {:x 10, :y 25, :state :climax, :altitude 26, :gradient 29, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 71} {:x 11, :y 25, :state :climax, :altitude 41, :gradient 37, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 12, :y 25, :state :climax, :altitude 59, :gradient 27, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 13, :y 25, :state :scrub, :altitude 61, :gradient 27, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 32} {:x 14, :y 25, :state :scrub, :altitude 59, :gradient 41, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 73} {:x 15, :y 25, :state :forest, :altitude 77, :gradient 55, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 16, :y 25, :state :forest, :altitude 94, :gradient 42, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 17, :y 25, :state :scrub, :altitude 93, :gradient 35, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 54} {:x 18, :y 25, :state :forest, :altitude 79, :gradient 52, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 19, :y 25, :state :scrub, :altitude 55, :gradient 48, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 42} {:x 20, :y 25, :state :fire, :altitude 42, :gradient 27, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 49} {:x 21, :y 25, :state :scrub, :altitude 35, :gradient 19, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 54} {:x 22, :y 25, :state :climax, :altitude 27, :gradient 35, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 81} {:x 23, :y 25, :state :fire, :altitude 17, :gradient 28, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 72} {:x 24, :y 25, :state :water, :altitude 2, :gradient 27, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 25, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 25, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 25, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 25, :state :water, :altitude 1, :gradient 19, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 25, :state :water, :altitude 1, :gradient 19, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 25, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 25, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 25, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 25, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 25, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 25, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 25, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 25, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 25, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 25, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 25, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 25, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 25, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 25, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 25, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 25, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 25, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 25, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 26, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 26, :state :climax, :altitude 20, :gradient 51, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 81} {:x 6, :y 26, :state :crop, :altitude 45, :gradient 65, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 22} {:x 7, :y 26, :state :grassland, :altitude 52, :gradient 62, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 37} {:x 8, :y 26, :state :grassland, :altitude 46, :gradient 60, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 39} {:x 9, :y 26, :state :grassland, :altitude 31, :gradient 60, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 29} {:x 10, :y 26, :state :pasture, :altitude 28, :gradient 37, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 60} {:x 11, :y 26, :state :scrub, :altitude 37, :gradient 33, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 50} {:x 12, :y 26, :state :scrub, :altitude 55, :gradient 30, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 25} {:x 13, :y 26, :state :scrub, :altitude 63, :gradient 28, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 18} {:x 14, :y 26, :state :climax, :altitude 60, :gradient 30, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 77} {:x 15, :y 26, :state :forest, :altitude 74, :gradient 49, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 67} {:x 16, :y 26, :state :scrub, :altitude 96, :gradient 44, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 32} {:x 17, :y 26, :state :forest, :altitude 77, :gradient 58, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 74} {:x 18, :y 26, :state :pasture, :altitude 61, :gradient 65, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 56} {:x 19, :y 26, :state :climax, :altitude 41, :gradient 52, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 20, :y 26, :state :pasture, :altitude 31, :gradient 28, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 60} {:x 21, :y 26, :state :waste, :altitude 28, :gradient 22, :generation 101, :rule "if state is fire then state should be waste", :fertility 64} {:x 22, :y 26, :state :pasture, :altitude 24, :gradient 34, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 74} {:x 23, :y 26, :state :water, :altitude 2, :gradient 26, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 26, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 26, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 26, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 27, :state :water, :altitude 1, :gradient 13, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 27, :state :water, :altitude 1, :gradient 35, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 27, :state :climax, :altitude 22, :gradient 51, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 83} {:x 6, :y 27, :state :climax, :altitude 52, :gradient 57, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 67} {:x 7, :y 27, :state :pasture, :altitude 77, :gradient 41, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 50} {:x 8, :y 27, :state :heath, :altitude 86, :gradient 48, :generation 101, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 50} {:x 9, :y 27, :state :climax, :altitude 63, :gradient 58, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 10, :y 27, :state :pasture, :altitude 38, :gradient 50, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 48} {:x 11, :y 27, :state :scrub, :altitude 33, :gradient 30, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 48} {:x 12, :y 27, :state :scrub, :altitude 33, :gradient 37, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 75} {:x 13, :y 27, :state :climax, :altitude 47, :gradient 37, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 79} {:x 14, :y 27, :state :scrub, :altitude 47, :gradient 41, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 60} {:x 15, :y 27, :state :pasture, :altitude 50, :gradient 63, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 64} {:x 16, :y 27, :state :crop, :altitude 64, :gradient 63, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 32} {:x 17, :y 27, :state :crop, :altitude 55, :gradient 58, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 58} {:x 18, :y 27, :state :crop, :altitude 38, :gradient 49, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 31} {:x 19, :y 27, :state :climax, :altitude 28, :gradient 34, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 20, :y 27, :state :fire, :altitude 27, :gradient 15, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 75} {:x 21, :y 27, :state :climax, :altitude 27, :gradient 16, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 22, :y 27, :state :pasture, :altitude 20, :gradient 27, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 10} {:x 23, :y 27, :state :water, :altitude 1, :gradient 23, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 27, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 27, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 28, :state :water, :altitude 1, :gradient 13, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 28, :state :house, :altitude 14, :gradient 35, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 25} {:x 5, :y 28, :state :crop, :altitude 36, :gradient 51, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 38} {:x 6, :y 28, :state :climax, :altitude 52, :gradient 55, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 7, :y 28, :state :forest, :altitude 70, :gradient 46, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 71} {:x 8, :y 28, :state :scrub, :altitude 79, :gradient 46, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 59} {:x 9, :y 28, :state :scrub, :altitude 78, :gradient 48, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 29} {:x 10, :y 28, :state :climax, :altitude 56, :gradient 45, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 11, :y 28, :state :scrub, :altitude 35, :gradient 30, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 52} {:x 12, :y 28, :state :climax, :altitude 26, :gradient 23, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 13, :y 28, :state :climax, :altitude 33, :gradient 23, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 14, :y 28, :state :pasture, :altitude 37, :gradient 26, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 56} {:x 15, :y 28, :state :pasture, :altitude 33, :gradient 36, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 62} {:x 16, :y 28, :state :crop, :altitude 40, :gradient 31, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 35} {:x 17, :y 28, :state :house, :altitude 50, :gradient 26, :generation 101, :rule "if state is house and some neighbours are pasture then state should be house", :fertility 43} {:x 18, :y 28, :state :pasture, :altitude 42, :gradient 27, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 10} {:x 19, :y 28, :state :house, :altitude 37, :gradient 15, :generation 101, :rule "if state is house and some neighbours are pasture then state should be house", :fertility 19} {:x 20, :y 28, :state :ploughland, :altitude 33, :gradient 16, :generation 101, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 30} {:x 21, :y 28, :state :pasture, :altitude 26, :gradient 36, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 19} {:x 22, :y 28, :state :house, :altitude 17, :gradient 26, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 14} {:x 23, :y 28, :state :water, :altitude 1, :gradient 19, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 28, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 29, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 29, :state :water, :altitude 1, :gradient 27, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 29, :state :ploughland, :altitude 12, :gradient 35, :generation 101, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 31} {:x 5, :y 29, :state :grassland, :altitude 32, :gradient 40, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 44} {:x 6, :y 29, :state :heath, :altitude 41, :gradient 42, :generation 101, :rule "if state is waste and some neighbours are forest then state should be heath", :fertility 62} {:x 7, :y 29, :state :scrub, :altitude 40, :gradient 51, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 32} {:x 8, :y 29, :state :scrub, :altitude 50, :gradient 52, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 58} {:x 9, :y 29, :state :scrub, :altitude 60, :gradient 52, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 62} {:x 10, :y 29, :state :climax, :altitude 52, :gradient 51, :generation 101, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 67} {:x 11, :y 29, :state :climax, :altitude 35, :gradient 30, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 71} {:x 12, :y 29, :state :scrub, :altitude 26, :gradient 22, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 59} {:x 13, :y 29, :state :scrub, :altitude 24, :gradient 24, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 49} {:x 14, :y 29, :state :pasture, :altitude 28, :gradient 24, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 67} {:x 15, :y 29, :state :house, :altitude 33, :gradient 19, :generation 101, :rule "if state is house and some neighbours are pasture then state should be house", :fertility 47} {:x 16, :y 29, :state :ploughland, :altitude 43, :gradient 17, :generation 101, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 18} {:x 17, :y 29, :state :house, :altitude 49, :gradient 21, :generation 101, :rule "if state is house and some neighbours are pasture then state should be house", :fertility 21} {:x 18, :y 29, :state :grassland, :altitude 41, :gradient 23, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 13} {:x 19, :y 29, :state :inn, :altitude 38, :gradient 15, :generation 101, :rule "if state is house and some neighbours are market and more than 1 neighbours are house then 1 chance in 5 state should be inn", :fertility 34} {:x 20, :y 29, :state :crop, :altitude 37, :gradient 36, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 25} {:x 21, :y 29, :state :grassland, :altitude 22, :gradient 36, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 18} {:x 22, :y 29, :state :water, :altitude 1, :gradient 25, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 29, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 29, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 30, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 30, :state :house, :altitude 12, :gradient 27, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 17} {:x 4, :y 30, :state :ploughland, :altitude 28, :gradient 31, :generation 101, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 20} {:x 5, :y 30, :state :climax, :altitude 31, :gradient 29, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 81} {:x 6, :y 30, :state :climax, :altitude 28, :gradient 13, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 70} {:x 7, :y 30, :state :scrub, :altitude 28, :gradient 23, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 52} {:x 8, :y 30, :state :fire, :altitude 37, :gradient 34, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 83} {:x 9, :y 30, :state :forest, :altitude 27, :gradient 42, :generation 101, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 64} {:x 10, :y 30, :state :climax, :altitude 28, :gradient 47, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 28} {:x 11, :y 30, :state :climax, :altitude 32, :gradient 42, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 12, :y 30, :state :fire, :altitude 28, :gradient 26, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 58} {:x 13, :y 30, :state :pasture, :altitude 13, :gradient 19, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 74} {:x 14, :y 30, :state :pasture, :altitude 24, :gradient 24, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 44} {:x 15, :y 30, :state :scrub, :altitude 33, :gradient 30, :generation 101, :rule "if state is in climax and more than 3 neighbours within 2 are house then state should be scrub", :fertility 66} {:x 16, :y 30, :state :house, :altitude 35, :gradient 36, :generation 101, :rule "if state is house and some neighbours are pasture then state should be house", :fertility 32} {:x 17, :y 30, :state :pasture, :altitude 36, :gradient 36, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 10} {:x 18, :y 30, :state :house, :altitude 29, :gradient 47, :generation 101, :rule "if state is house and some neighbours are pasture then state should be house", :fertility 28} {:x 19, :y 30, :state :grassland, :altitude 27, :gradient 40, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 12} {:x 20, :y 30, :state :house, :altitude 27, :gradient 37, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 21, :y 30, :state :water, :altitude 2, :gradient 36, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 30, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 30, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 31, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 31, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 31, :state :water, :altitude 1, :gradient 35, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 31, :state :ploughland, :altitude 24, :gradient 44, :generation 101, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 35} {:x 5, :y 31, :state :climax, :altitude 29, :gradient 26, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 64} {:x 6, :y 31, :state :climax, :altitude 31, :gradient 22, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 75} {:x 7, :y 31, :state :heath, :altitude 28, :gradient 23, :generation 101, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 45} {:x 8, :y 31, :state :scrub, :altitude 27, :gradient 19, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 68} {:x 9, :y 31, :state :waste, :altitude 26, :gradient 19, :generation 101, :rule "if state is fire then state should be waste", :fertility 68} {:x 10, :y 31, :state :scrub, :altitude 18, :gradient 19, :generation 101, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 45} {:x 11, :y 31, :state :heath, :altitude 13, :gradient 22, :generation 101, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 48} {:x 12, :y 31, :state :waste, :altitude 10, :gradient 23, :generation 101, :rule "if state is fire then state should be waste", :fertility 66} {:x 13, :y 31, :state :water, :altitude 9, :gradient 18, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 31, :state :pasture, :altitude 23, :gradient 32, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 59} {:x 15, :y 31, :state :pasture, :altitude 17, :gradient 34, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 52} {:x 16, :y 31, :state :scrub, :altitude 13, :gradient 35, :generation 101, :rule "if state is in climax and more than 3 neighbours within 2 are house then state should be scrub", :fertility 59} {:x 17, :y 31, :state :ploughland, :altitude 14, :gradient 35, :generation 101, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 21} {:x 18, :y 31, :state :house, :altitude 14, :gradient 35, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 19, :y 31, :state :water, :altitude 2, :gradient 28, :generation 101, :rule "if state is water then state should be water"} {:x 20, :y 31, :state :water, :altitude 1, :gradient 26, :generation 101, :rule "if state is water then state should be water"} {:x 21, :y 31, :state :water, :altitude 1, :gradient 26, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 31, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 31, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 32, :state :water, :altitude 1, :gradient 25, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 32, :state :camp, :altitude 17, :gradient 31, :generation 101, :rule "if state is in grassland or heath and more than 3 neighbours are water and generation is more than 20 then state should be camp", :fertility 56} {:x 3, :y 32, :state :climax, :altitude 22, :gradient 35, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 92} {:x 4, :y 32, :state :climax, :altitude 36, :gradient 44, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 70} {:x 5, :y 32, :state :climax, :altitude 45, :gradient 26, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 25} {:x 6, :y 32, :state :climax, :altitude 50, :gradient 27, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 80} {:x 7, :y 32, :state :heath, :altitude 45, :gradient 29, :generation 101, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 44} {:x 8, :y 32, :state :heath, :altitude 35, :gradient 30, :generation 101, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 46} {:x 9, :y 32, :state :waste, :altitude 32, :gradient 38, :generation 101, :rule "if state is fire then state should be waste", :fertility 27} {:x 10, :y 32, :state :climax, :altitude 24, :gradient 25, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 11, :y 32, :state :climax, :altitude 19, :gradient 22, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 12, :y 32, :state :waste, :altitude 20, :gradient 23, :generation 101, :rule "if state is fire then state should be waste", :fertility 77} {:x 13, :y 32, :state :climax, :altitude 20, :gradient 23, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 14, :y 32, :state :pasture, :altitude 14, :gradient 30, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 49} {:x 15, :y 32, :state :water, :altitude 1, :gradient 25, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 32, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 32, :state :water, :altitude 1, :gradient 13, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 32, :state :water, :altitude 1, :gradient 13, :generation 101, :rule "if state is water then state should be water"} {:x 19, :y 32, :state :water, :altitude 1, :gradient 13, :generation 101, :rule "if state is water then state should be water"} {:x 20, :y 32, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 21, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 32, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 33, :state :water, :altitude 1, :gradient 25, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 33, :state :climax, :altitude 26, :gradient 31, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 69} {:x 3, :y 33, :state :climax, :altitude 32, :gradient 24, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 79} {:x 4, :y 33, :state :climax, :altitude 33, :gradient 33, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 5, :y 33, :state :fire, :altitude 41, :gradient 35, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 63} {:x 6, :y 33, :state :waste, :altitude 46, :gradient 38, :generation 101, :rule "if state is fire then state should be waste", :fertility 73} {:x 7, :y 33, :state :climax, :altitude 55, :gradient 38, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 8, :y 33, :state :waste, :altitude 56, :gradient 32, :generation 101, :rule "if state is fire then state should be waste", :fertility 48} {:x 9, :y 33, :state :climax, :altitude 38, :gradient 44, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 10, :y 33, :state :climax, :altitude 27, :gradient 26, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 11, :y 33, :state :climax, :altitude 31, :gradient 20, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 78} {:x 12, :y 33, :state :fire, :altitude 32, :gradient 17, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 47} {:x 13, :y 33, :state :climax, :altitude 31, :gradient 18, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 14, :y 33, :state :pasture, :altitude 26, :gradient 30, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 32} {:x 15, :y 33, :state :pasture, :altitude 12, :gradient 25, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 24} {:x 16, :y 33, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 33, :state :water, :altitude 1, :gradient 17, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 19, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 20, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 21, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 33, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 34, :state :water, :altitude 1, :gradient 25, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 34, :state :climax, :altitude 12, :gradient 31, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 90} {:x 3, :y 34, :state :climax, :altitude 12, :gradient 32, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 4, :y 34, :state :climax, :altitude 15, :gradient 40, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 85} {:x 5, :y 34, :state :climax, :altitude 17, :gradient 45, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 6, :y 34, :state :fire, :altitude 18, :gradient 38, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 78} {:x 7, :y 34, :state :climax, :altitude 29, :gradient 38, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 66} {:x 8, :y 34, :state :climax, :altitude 36, :gradient 33, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 67} {:x 9, :y 34, :state :fire, :altitude 23, :gradient 44, :generation 101, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 61} {:x 10, :y 34, :state :climax, :altitude 12, :gradient 24, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 11, :y 34, :state :climax, :altitude 14, :gradient 20, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 12, :y 34, :state :climax, :altitude 17, :gradient 31, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 13, :y 34, :state :climax, :altitude 18, :gradient 31, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 14, :y 34, :state :climax, :altitude 18, :gradient 30, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 85} {:x 15, :y 34, :state :climax, :altitude 23, :gradient 25, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 16, :y 34, :state :house, :altitude 18, :gradient 22, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 17, :y 34, :state :water, :altitude 1, :gradient 17, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 34, :state :water, :altitude 1, :gradient 31, :generation 101, :rule "if state is water then state should be water"} {:x 19, :y 34, :state :water, :altitude 1, :gradient 31, :generation 101, :rule "if state is water then state should be water"} {:x 20, :y 34, :state :water, :altitude 1, :gradient 31, :generation 101, :rule "if state is water then state should be water"} {:x 21, :y 34, :state :water, :altitude 1, :gradient 25, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 34, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 35, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 35, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 35, :state :water, :altitude 1, :gradient 14, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 35, :state :water, :altitude 1, :gradient 23, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 35, :state :ploughland, :altitude 22, :gradient 36, :generation 101, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 49} {:x 6, :y 35, :state :ploughland, :altitude 24, :gradient 20, :generation 101, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 40} {:x 7, :y 35, :state :pasture, :altitude 26, :gradient 19, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 49} {:x 8, :y 35, :state :climax, :altitude 26, :gradient 13, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 69} {:x 9, :y 35, :state :climax, :altitude 27, :gradient 24, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 84} {:x 10, :y 35, :state :climax, :altitude 24, :gradient 21, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 11, :y 35, :state :climax, :altitude 27, :gradient 21, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 12, :y 35, :state :climax, :altitude 22, :gradient 32, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 13, :y 35, :state :water, :altitude 1, :gradient 25, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 35, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 35, :state :climax, :altitude 13, :gradient 22, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 79} {:x 16, :y 35, :state :climax, :altitude 12, :gradient 22, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 84} {:x 17, :y 35, :state :water, :altitude 1, :gradient 18, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 35, :state :climax, :altitude 17, :gradient 48, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 91} {:x 19, :y 35, :state :climax, :altitude 32, :gradient 48, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 73} {:x 20, :y 35, :state :climax, :altitude 26, :gradient 48, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 21, :y 35, :state :water, :altitude 1, :gradient 34, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 35, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 36, :state :water, :altitude 1, :gradient 23, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 36, :state :house, :altitude 24, :gradient 36, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 42} {:x 6, :y 36, :state :scrub, :altitude 37, :gradient 22, :generation 101, :rule "if state is in climax and more than 3 neighbours within 2 are house then state should be scrub", :fertility 39} {:x 7, :y 36, :state :crop, :altitude 32, :gradient 13, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 35} {:x 8, :y 36, :state :grassland, :altitude 27, :gradient 9, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 39} {:x 9, :y 36, :state :climax, :altitude 32, :gradient 7, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 10, :y 36, :state :climax, :altitude 31, :gradient 10, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 66} {:x 11, :y 36, :state :climax, :altitude 33, :gradient 13, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 73} {:x 12, :y 36, :state :climax, :altitude 26, :gradient 32, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 72} {:x 13, :y 36, :state :water, :altitude 1, :gradient 25, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 36, :state :water, :altitude 1, :gradient 12, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 36, :state :water, :altitude 1, :gradient 12, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 36, :state :water, :altitude 1, :gradient 12, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 36, :state :water, :altitude 1, :gradient 18, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 36, :state :climax, :altitude 19, :gradient 48, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 86} {:x 19, :y 36, :state :climax, :altitude 49, :gradient 18, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 79} {:x 20, :y 36, :state :climax, :altitude 35, :gradient 48, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 83} {:x 21, :y 36, :state :water, :altitude 1, :gradient 34, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 36, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 37, :state :water, :altitude 1, :gradient 23, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 37, :state :house, :altitude 13, :gradient 36, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 34} {:x 6, :y 37, :state :crop, :altitude 35, :gradient 35, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 20} {:x 7, :y 37, :state :house, :altitude 35, :gradient 19, :generation 101, :rule "if state is house and some neighbours are ploughland then state should be house", :fertility 49} {:x 8, :y 37, :state :house, :altitude 28, :gradient 23, :generation 101, :rule "if state is house and some neighbours are ploughland then state should be house", :fertility 34} {:x 9, :y 37, :state :climax, :altitude 27, :gradient 30, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 86} {:x 10, :y 37, :state :climax, :altitude 29, :gradient 32, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 11, :y 37, :state :climax, :altitude 23, :gradient 32, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 12, :y 37, :state :heath, :altitude 18, :gradient 32, :generation 101, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 50} {:x 13, :y 37, :state :water, :altitude 1, :gradient 25, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 37, :state :water, :altitude 1, :gradient 18, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 37, :state :climax, :altitude 17, :gradient 48, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 95} {:x 19, :y 37, :state :climax, :altitude 33, :gradient 47, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 81} {:x 20, :y 37, :state :camp, :altitude 23, :gradient 48, :generation 101, :rule "if state is in grassland or heath and more than 3 neighbours are water and generation is more than 20 then state should be camp"} {:x 21, :y 37, :state :water, :altitude 1, :gradient 34, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 37, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 38, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 38, :state :water, :altitude 1, :gradient 18, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 38, :state :water, :altitude 1, :gradient 18, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 38, :state :water, :altitude 2, :gradient 34, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 38, :state :house, :altitude 19, :gradient 34, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 28} {:x 7, :y 38, :state :grassland, :altitude 19, :gradient 34, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 20} {:x 8, :y 38, :state :pasture, :altitude 18, :gradient 34, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 41} {:x 9, :y 38, :state :grassland, :altitude 12, :gradient 27, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 20} {:x 10, :y 38, :state :water, :altitude 2, :gradient 28, :generation 101, :rule "if state is water then state should be water"} {:x 11, :y 38, :state :water, :altitude 1, :gradient 27, :generation 101, :rule "if state is water then state should be water"} {:x 12, :y 38, :state :water, :altitude 2, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 13, :y 38, :state :water, :altitude 1, :gradient 17, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 38, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 38, :state :camp, :altitude 12, :gradient 32, :generation 101, :rule "if state is in grassland or heath and more than 3 neighbours are water and generation is more than 20 then state should be camp", :fertility 15} {:x 19, :y 38, :state :climax, :altitude 17, :gradient 32, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 86} {:x 20, :y 38, :state :water, :altitude 2, :gradient 32, :generation 101, :rule "if state is water then state should be water"} {:x 21, :y 38, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 38, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 39, :state :water, :altitude 1, :gradient 12, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 39, :state :climax, :altitude 12, :gradient 27, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 84} {:x 4, :y 39, :state :house, :altitude 19, :gradient 27, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 5, :y 39, :state :water, :altitude 2, :gradient 27, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 39, :state :water, :altitude 1, :gradient 18, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 39, :state :water, :altitude 1, :gradient 28, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 39, :state :pasture, :altitude 15, :gradient 48, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 26} {:x 9, :y 39, :state :house, :altitude 26, :gradient 47, :generation 101, :rule "if state is house and some neighbours are crop then state should be house", :fertility 43} {:x 10, :y 39, :state :camp, :altitude 26, :gradient 48, :generation 101, :rule "if state is in waste or grassland and some neighbours are market then state should be camp", :fertility 49} {:x 11, :y 39, :state :crop, :altitude 23, :gradient 48, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 52} {:x 12, :y 39, :state :house, :altitude 13, :gradient 41, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 58} {:x 13, :y 39, :state :water, :altitude 1, :gradient 27, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 39, :state :water, :altitude 1, :gradient 17, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 39, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 39, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 19, :y 39, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 20, :y 39, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 21, :y 39, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 39, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 40, :state :water, :altitude 1, :gradient 12, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 40, :state :pasture, :altitude 13, :gradient 27, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 10} {:x 4, :y 40, :state :ploughland, :altitude 28, :gradient 26, :generation 101, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 12} {:x 5, :y 40, :state :house, :altitude 14, :gradient 27, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 15} {:x 6, :y 40, :state :water, :altitude 1, :gradient 17, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 40, :state :house, :altitude 15, :gradient 28, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 39} {:x 8, :y 40, :state :house, :altitude 29, :gradient 49, :generation 101, :rule "if state is house and some neighbours are market then state should be house", :fertility 37} {:x 9, :y 40, :state :grassland, :altitude 49, :gradient 46, :generation 101, :rule "if state is market then state should be grassland", :fertility 9} {:x 10, :y 40, :state :climax, :altitude 49, :gradient 38, :generation 101, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 68} {:x 11, :y 40, :state :grassland, :altitude 42, :gradient 48, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 46} {:x 12, :y 40, :state :pasture, :altitude 28, :gradient 50, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 77} {:x 13, :y 40, :state :grassland, :altitude 18, :gradient 34, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 49} {:x 14, :y 40, :state :water, :altitude 1, :gradient 19, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 19, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 20, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 21, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 40, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 41, :state :water, :altitude 1, :gradient 12, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 41, :state :climax, :altitude 12, :gradient 27, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 82} {:x 4, :y 41, :state :climax, :altitude 28, :gradient 27, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 5, :y 41, :state :scrub, :altitude 18, :gradient 27, :generation 101, :rule "if state is in climax and more than 3 neighbours within 2 are house then state should be scrub", :fertility 17} {:x 6, :y 41, :state :water, :altitude 1, :gradient 17, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 41, :state :house, :altitude 14, :gradient 28, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 8, :y 41, :state :scrub, :altitude 29, :gradient 49, :generation 101, :rule "if state is in climax and more than 3 neighbours within 2 are house then state should be scrub", :fertility 62} {:x 9, :y 41, :state :house, :altitude 50, :gradient 37, :generation 101, :rule "if state is house and some neighbours are ploughland then state should be house", :fertility 38} {:x 10, :y 41, :state :scrub, :altitude 61, :gradient 19, :generation 101, :rule "if state is in climax and more than 3 neighbours within 2 are house then state should be scrub", :fertility 54} {:x 11, :y 41, :state :scrub, :altitude 51, :gradient 33, :generation 101, :rule "if state is in climax and more than 3 neighbours within 2 are house then state should be scrub", :fertility 53} {:x 12, :y 41, :state :climax, :altitude 35, :gradient 33, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 81} {:x 13, :y 41, :state :pasture, :altitude 20, :gradient 34, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 75} {:x 14, :y 41, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 41, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 19, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 20, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 21, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 41, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 42, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 42, :state :water, :altitude 1, :gradient 11, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 42, :state :water, :altitude 1, :gradient 27, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 42, :state :camp, :altitude 14, :gradient 27, :generation 101, :rule "if state is in grassland or heath and more than 3 neighbours are water and generation is more than 20 then state should be camp", :fertility 21} {:x 5, :y 42, :state :house, :altitude 12, :gradient 27, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 22} {:x 6, :y 42, :state :water, :altitude 1, :gradient 17, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 42, :state :water, :altitude 1, :gradient 28, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 42, :state :climax, :altitude 24, :gradient 49, :generation 101, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 36} {:x 9, :y 42, :state :crop, :altitude 32, :gradient 47, :generation 101, :rule "if state is ploughland then state should be crop", :fertility 20} {:x 10, :y 42, :state :house, :altitude 40, :gradient 41, :generation 101, :rule "if state is house and some neighbours are ploughland then state should be house", :fertility 18} {:x 11, :y 42, :state :grassland, :altitude 40, :gradient 33, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 33} {:x 12, :y 42, :state :pasture, :altitude 32, :gradient 31, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 52} {:x 13, :y 42, :state :climax, :altitude 23, :gradient 34, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 73} {:x 14, :y 42, :state :water, :altitude 2, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 42, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 19, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 20, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 21, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 42, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 43, :state :water, :altitude 1, :gradient 16, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 43, :state :water, :altitude 2, :gradient 27, :generation 101, :rule "if state is water then state should be water"} {:x 3, :y 43, :state :water, :altitude 2, :gradient 27, :generation 101, :rule "if state is water then state should be water"} {:x 4, :y 43, :state :water, :altitude 1, :gradient 27, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 43, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 43, :state :water, :altitude 2, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 43, :state :water, :altitude 1, :gradient 23, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 43, :state :house, :altitude 14, :gradient 31, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 38} {:x 9, :y 43, :state :pasture, :altitude 20, :gradient 39, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 29} {:x 10, :y 43, :state :grassland, :altitude 28, :gradient 39, :generation 101, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 30} {:x 11, :y 43, :state :pasture, :altitude 28, :gradient 23, :generation 101, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 50} {:x 12, :y 43, :state :fire, :altitude 28, :gradient 25, :generation 101, :rule "if state is climax then 1 chance in 500 state should be fire", :fertility 73} {:x 13, :y 43, :state :climax, :altitude 23, :gradient 31, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 81} {:x 14, :y 43, :state :water, :altitude 2, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 43, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 19, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 20, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 21, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 43, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 44, :state :water, :altitude 1, :gradient 18, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 44, :state :house, :altitude 17, :gradient 36, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 6} {:x 3, :y 44, :state :camp, :altitude 28, :gradient 36, :generation 101, :rule "if state is in grassland or heath and more than 3 neighbours are water and generation is more than 20 then state should be camp", :fertility 20} {:x 4, :y 44, :state :water, :altitude 2, :gradient 36, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 44, :state :camp, :altitude 12, :gradient 21, :generation 101, :rule "if state is in grassland or heath and more than 3 neighbours are water and generation is more than 20 then state should be camp", :fertility 47} {:x 6, :y 44, :state :climax, :altitude 22, :gradient 14, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 95} {:x 7, :y 44, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 44, :state :water, :altitude 1, :gradient 19, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 44, :state :water, :altitude 1, :gradient 27, :generation 101, :rule "if state is water then state should be water"} {:x 10, :y 44, :state :house, :altitude 20, :gradient 27, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 36} {:x 11, :y 44, :state :climax, :altitude 17, :gradient 27, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 69} {:x 12, :y 44, :state :climax, :altitude 22, :gradient 27, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 88} {:x 13, :y 44, :state :climax, :altitude 15, :gradient 27, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 88} {:x 14, :y 44, :state :water, :altitude 1, :gradient 22, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 44, :state :water, :altitude 1, :gradient 1, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 19, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 20, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 21, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 44, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 45, :state :water, :altitude 1, :gradient 18, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 45, :state :climax, :altitude 19, :gradient 36, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 84} {:x 3, :y 45, :state :climax, :altitude 37, :gradient 26, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 4, :y 45, :state :climax, :altitude 14, :gradient 36, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 78} {:x 5, :y 45, :state :water, :altitude 2, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 45, :state :house, :altitude 15, :gradient 21, :generation 101, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 7, :y 45, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 45, :state :water, :altitude 1, :gradient 19, :generation 101, :rule "if state is water then state should be water"} {:x 10, :y 45, :state :water, :altitude 1, :gradient 19, :generation 101, :rule "if state is water then state should be water"} {:x 11, :y 45, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 12, :y 45, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 13, :y 45, :state :water, :altitude 1, :gradient 21, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 45, :state :water, :altitude 1, :gradient 14, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 19, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 20, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 21, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 45, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}] [{:x 0, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 1, :y 46, :state :water, :altitude 1, :gradient 18, :generation 101, :rule "if state is water then state should be water"} {:x 2, :y 46, :state :climax, :altitude 13, :gradient 36, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 80} {:x 3, :y 46, :state :climax, :altitude 22, :gradient 35, :generation 101, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 80} {:x 4, :y 46, :state :water, :altitude 2, :gradient 36, :generation 101, :rule "if state is water then state should be water"} {:x 5, :y 46, :state :water, :altitude 1, :gradient 14, :generation 101, :rule "if state is water then state should be water"} {:x 6, :y 46, :state :water, :altitude 1, :gradient 14, :generation 101, :rule "if state is water then state should be water"} {:x 7, :y 46, :state :water, :altitude 1, :gradient 14, :generation 101, :rule "if state is water then state should be water"} {:x 8, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 9, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 10, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 11, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 12, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 13, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 14, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 15, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 16, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 17, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 18, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 19, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 20, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 21, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 22, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 23, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 24, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 25, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 26, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 27, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 28, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 29, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 30, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 31, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 32, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 33, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 34, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 35, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 36, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 37, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 38, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 39, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 40, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 41, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 42, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 43, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 44, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 45, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 46, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"} {:x 47, :y 46, :state :water, :altitude 1, :gradient 0, :generation 101, :rule "if state is water then state should be water"}]]